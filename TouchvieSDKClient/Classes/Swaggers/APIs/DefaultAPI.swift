//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DefaultAPI: APIBase {
    /**
     * enum for parameter imageSize
     */
    public enum ImageSize_cardsCardIdGet: String { 
        case S = "s"
        case M = "m"
        case L = "l"
    }

    /**
     Retrieves the information of Touchvie card.
     
     - parameter cardId: (path) ID of the card to retrieve. 
     - parameter relations: (query) Defines if the response of the synchronization server should include card relations. Default \&quot;true\&quot;. (optional)
     - parameter imageSize: (query) Size of the images to be returned by the synchronization server. Default \&quot;m\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cardsCardIdGet(cardId cardId: String, relations: Bool? = nil, imageSize: ImageSize_cardsCardIdGet? = nil, completion: ((data: CardDetail?, error: ErrorType?) -> Void)) {
        cardsCardIdGetWithRequestBuilder(cardId: cardId, relations: relations, imageSize: imageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Retrieves the information of Touchvie card.
     - GET /cards/{cardId}
     - Retrieves the information of Touchvie card.
     - examples: [{contentType=application/json, example={
  "hostname" : "234.45.65.45",
  "port" : 3001,
  "channel" : "abcd123456782141242332"
}}]
     
     - parameter cardId: (path) ID of the card to retrieve. 
     - parameter relations: (query) Defines if the response of the synchronization server should include card relations. Default \&quot;true\&quot;. (optional)
     - parameter imageSize: (query) Size of the images to be returned by the synchronization server. Default \&quot;m\&quot;. (optional)

     - returns: RequestBuilder<CardDetail> 
     */
    public class func cardsCardIdGetWithRequestBuilder(cardId cardId: String, relations: Bool? = nil, imageSize: ImageSize_cardsCardIdGet? = nil) -> RequestBuilder<CardDetail> {
        var path = "/cards/{cardId}"
        path = path.stringByReplacingOccurrencesOfString("{cardId}", withString: "\(cardId)", options: .LiteralSearch, range: nil)
        let URLString = TouchvieSDKClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "relations": relations,
            "image_size": imageSize?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<CardDetail>.Type = TouchvieSDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter imageSize
     */
    public enum ImageSize_channelsChannelIdDynamicGet: String { 
        case S = "s"
        case M = "m"
        case L = "l"
    }

    /**
     Retrieves the information of a dynamic Touchvie information server.
     
     - parameter channelId: (path) ID of the channel to synchronize. 
     - parameter relations: (query) Defines if the response of the synchronization server should include card relations. Default \&quot;false\&quot;. (optional)
     - parameter imageSize: (query) Size of the images to be returned by the synchronization server. Default \&quot;m\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func channelsChannelIdDynamicGet(channelId channelId: String, relations: Bool? = nil, imageSize: ImageSize_channelsChannelIdDynamicGet? = nil, completion: ((data: DynamicServer?, error: ErrorType?) -> Void)) {
        channelsChannelIdDynamicGetWithRequestBuilder(channelId: channelId, relations: relations, imageSize: imageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Retrieves the information of a dynamic Touchvie information server.
     - GET /channels/{channelId}/dynamic
     - Retrieves the information of a dynamic Touchvie information server.
     - examples: [{contentType=application/json, example={
  "hostname" : "234.45.65.45",
  "port" : 3001,
  "channel" : "abcd123456782141242332"
}}]
     
     - parameter channelId: (path) ID of the channel to synchronize. 
     - parameter relations: (query) Defines if the response of the synchronization server should include card relations. Default \&quot;false\&quot;. (optional)
     - parameter imageSize: (query) Size of the images to be returned by the synchronization server. Default \&quot;m\&quot;. (optional)

     - returns: RequestBuilder<DynamicServer> 
     */
    public class func channelsChannelIdDynamicGetWithRequestBuilder(channelId channelId: String, relations: Bool? = nil, imageSize: ImageSize_channelsChannelIdDynamicGet? = nil) -> RequestBuilder<DynamicServer> {
        var path = "/channels/{channelId}/dynamic"
        path = path.stringByReplacingOccurrencesOfString("{channelId}", withString: "\(channelId)", options: .LiteralSearch, range: nil)
        let URLString = TouchvieSDKClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "relations": relations,
            "image_size": imageSize?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DynamicServer>.Type = TouchvieSDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Check if a list of channels are available to be synchronized.
     
     - parameter channelIdList: (path) List of channel IDs (internal client IDs). The ID&#39;s should be provided as a comma separated list. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func channelsChannelIdListReadyGet(channelIdList channelIdList: [String], completion: ((data: [ChannelReady]?, error: ErrorType?) -> Void)) {
        channelsChannelIdListReadyGetWithRequestBuilder(channelIdList: channelIdList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Check if a list of channels are available to be synchronized.
     - GET /channels/{channelIdList}/ready
     - This endpoint allows to check if a list of channels are available to be synchronized at a given time using Touchvie API. At least one channel should be provided.
     - examples: [{contentType=application/json, example=[ {
  "channel_id" : "1",
  "ready" : true
}, {
  "channel_id" : "12",
  "ready" : false
} ]}]
     
     - parameter channelIdList: (path) List of channel IDs (internal client IDs). The ID&#39;s should be provided as a comma separated list. 

     - returns: RequestBuilder<[ChannelReady]> 
     */
    public class func channelsChannelIdListReadyGetWithRequestBuilder(channelIdList channelIdList: [String]) -> RequestBuilder<[ChannelReady]> {
        var path = "/channels/{channelIdList}/ready"
        path = path.stringByReplacingOccurrencesOfString("{channelIdList}", withString: "\(channelIdList)", options: .LiteralSearch, range: nil)
        let URLString = TouchvieSDKClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[ChannelReady]>.Type = TouchvieSDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter imageSize
     */
    public enum ImageSize_moviesMovieIdDynamicTimestampGet: String { 
        case S = "s"
        case M = "m"
        case L = "l"
    }

    /**
     Retrieves the information of a dynamic Touchvie information server.
     
     - parameter movieId: (path) ID of the movie (internal client ID) to be synchronized. 
     - parameter timestamp: (path) Timestamp of the movie being synchronized. The timestamp represents the number of seconds since the begining of the movie. Allows decimal values. \&quot;105.56\&quot; is a valid value. 
     - parameter relations: (query) Defines if the response of the synchronization server should include card relations. Default \&quot;false\&quot;. (optional)
     - parameter imageSize: (query) Size of the images to be returned by the synchronization server. Default \&quot;m\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func moviesMovieIdDynamicTimestampGet(movieId movieId: String, timestamp: String, relations: Bool? = nil, imageSize: ImageSize_moviesMovieIdDynamicTimestampGet? = nil, completion: ((data: DynamicServer?, error: ErrorType?) -> Void)) {
        moviesMovieIdDynamicTimestampGetWithRequestBuilder(movieId: movieId, timestamp: timestamp, relations: relations, imageSize: imageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Retrieves the information of a dynamic Touchvie information server.
     - GET /movies/{movieId}/dynamic/{timestamp}
     - Retrieves the information of a dynamic Touchvie information server.
     - examples: [{contentType=application/json, example={
  "hostname" : "234.45.65.45",
  "port" : 3001,
  "channel" : "abcd123456782141242332"
}}]
     
     - parameter movieId: (path) ID of the movie (internal client ID) to be synchronized. 
     - parameter timestamp: (path) Timestamp of the movie being synchronized. The timestamp represents the number of seconds since the begining of the movie. Allows decimal values. \&quot;105.56\&quot; is a valid value. 
     - parameter relations: (query) Defines if the response of the synchronization server should include card relations. Default \&quot;false\&quot;. (optional)
     - parameter imageSize: (query) Size of the images to be returned by the synchronization server. Default \&quot;m\&quot;. (optional)

     - returns: RequestBuilder<DynamicServer> 
     */
    public class func moviesMovieIdDynamicTimestampGetWithRequestBuilder(movieId movieId: String, timestamp: String, relations: Bool? = nil, imageSize: ImageSize_moviesMovieIdDynamicTimestampGet? = nil) -> RequestBuilder<DynamicServer> {
        var path = "/movies/{movieId}/dynamic/{timestamp}"
        path = path.stringByReplacingOccurrencesOfString("{movieId}", withString: "\(movieId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{timestamp}", withString: "\(timestamp)", options: .LiteralSearch, range: nil)
        let URLString = TouchvieSDKClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "relations": relations,
            "image_size": imageSize?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<DynamicServer>.Type = TouchvieSDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Check if a list of movies are available on Touchvie API.
     
     - parameter movieIdList: (path) List of movie IDs (internal client IDs). The ID&#39;s should be provided as a comma separated list. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func moviesMovieIdListReadyGet(movieIdList movieIdList: [String], completion: ((data: [MovieReady]?, error: ErrorType?) -> Void)) {
        moviesMovieIdListReadyGetWithRequestBuilder(movieIdList: movieIdList).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Check if a list of movies are available on Touchvie API.
     - GET /movies/{movieIdList}/ready
     - This endpoint allows to check if a list of movies are available to be synchronized using Touchvie API. At least one movie should be provided.
     - examples: [{contentType=application/json, example=[ {
  "movie_id" : "1234567890",
  "ready" : true
}, {
  "movie_id" : "0987654321",
  "ready" : false
} ]}]
     
     - parameter movieIdList: (path) List of movie IDs (internal client IDs). The ID&#39;s should be provided as a comma separated list. 

     - returns: RequestBuilder<[MovieReady]> 
     */
    public class func moviesMovieIdListReadyGetWithRequestBuilder(movieIdList movieIdList: [String]) -> RequestBuilder<[MovieReady]> {
        var path = "/movies/{movieIdList}/ready"
        path = path.stringByReplacingOccurrencesOfString("{movieIdList}", withString: "\(movieIdList)", options: .LiteralSearch, range: nil)
        let URLString = TouchvieSDKClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[MovieReady]>.Type = TouchvieSDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter imageSize
     */
    public enum ImageSize_moviesMovieIdStaticTimestampGet: String { 
        case S = "s"
        case M = "m"
        case L = "l"
    }

    /**
     Retrieves the information synchronized with the movie.
     
     - parameter movieId: (path) ID of the movie (internal client ID) to be synchronized. 
     - parameter timestamp: (path) Timestamp of the movie being synchronized. The timestamp represents the number of seconds since the begining of the movie. Allows decimal values. \&quot;105.56\&quot; is a valid value. 
     - parameter relations: (query) Defines if the response of the synchronization server should include card relations. Default \&quot;false\&quot;. (optional)
     - parameter imageSize: (query) Size of the images to be returned by the synchronization server. Default \&quot;m\&quot;. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func moviesMovieIdStaticTimestampGet(movieId movieId: String, timestamp: String, relations: Bool? = nil, imageSize: ImageSize_moviesMovieIdStaticTimestampGet? = nil, completion: ((data: StaticCard?, error: ErrorType?) -> Void)) {
        moviesMovieIdStaticTimestampGetWithRequestBuilder(movieId: movieId, timestamp: timestamp, relations: relations, imageSize: imageSize).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Retrieves the information synchronized with the movie.
     - GET /movies/{movieId}/static/{timestamp}
     - Retrieves the information synchronized with the movie.
     - examples: [{contentType=application/json, example={
  "card_id" : "abcd123456782141242332",
  "type" : "FASHION",
  "title" : "Card title",
  "subtitle" : "Card subtitle",
  "image" : "https://card.touchvie.com/abcd123456782141242332/abcd123456782141242332_m.jpg",
  "anchor_x" : 50,
  "anchor_y" : 50,
  "relations" : [ {
    "card_id" : "1234567981234abcd",
    "type" : "CURIOSITY",
    "title" : "Related card title",
    "subtitle" : "Related card subtitle",
    "image" : "https://card.touchvie.com/1234567981234abcd/1234567981234abcd_m.jpg",
    "anchor_x" : 75,
    "anchor_y" : 20
  } ]
}}]
     
     - parameter movieId: (path) ID of the movie (internal client ID) to be synchronized. 
     - parameter timestamp: (path) Timestamp of the movie being synchronized. The timestamp represents the number of seconds since the begining of the movie. Allows decimal values. \&quot;105.56\&quot; is a valid value. 
     - parameter relations: (query) Defines if the response of the synchronization server should include card relations. Default \&quot;false\&quot;. (optional)
     - parameter imageSize: (query) Size of the images to be returned by the synchronization server. Default \&quot;m\&quot;. (optional)

     - returns: RequestBuilder<StaticCard> 
     */
    public class func moviesMovieIdStaticTimestampGetWithRequestBuilder(movieId movieId: String, timestamp: String, relations: Bool? = nil, imageSize: ImageSize_moviesMovieIdStaticTimestampGet? = nil) -> RequestBuilder<StaticCard> {
        var path = "/movies/{movieId}/static/{timestamp}"
        path = path.stringByReplacingOccurrencesOfString("{movieId}", withString: "\(movieId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{timestamp}", withString: "\(timestamp)", options: .LiteralSearch, range: nil)
        let URLString = TouchvieSDKClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "relations": relations,
            "image_size": imageSize?.rawValue
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<StaticCard>.Type = TouchvieSDKClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
